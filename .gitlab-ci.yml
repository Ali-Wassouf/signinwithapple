image: docker:latest
services:
  - docker:dind

stages:
  - build
  - release
  - deploy

variables:
  DOCKER_BUILDKIT: 1
  ECS_CLUSTER_NAME: moon
  ECS_SERVICE_NAME: API

before_script:
# Login to the docker registry
  - docker info
  - echo -n $CI_JOB_TOKEN | docker login -u gitlab-ci-token --password-stdin $CI_REGISTRY
# Setup ssh connection to the server
  - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
  - eval $(ssh-agent -s)
  - cat "$EC2_INSTANCE_KEY" | tr -d '\r' | ssh-add -
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh
  - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'

build_image:
  stage: build
  script:
    - docker pull $CI_REGISTRY_IMAGE:latest || true
    - docker build --pull --cache-from $CI_REGISTRY_IMAGE:latest --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA

release_latest:
  variables:
    GIT_STRATEGY: none
  stage: release
  only:
    - master
  script:
    - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE:latest
    - docker push $CI_REGISTRY_IMAGE:latest

release_tag:
  variables:
    GIT_STRATEGY: none
  stage: release
  only:
    - tags
  script:
    - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME

deploy_moon:
  variables:
    GIT_STRATEGY: none
  stage: deploy
  environment: moon
  when: manual
  only:
    - tags
  script:
    - ssh -i "$EC2_INSTANCE_KEY" "ec2@${EC2_INSTANCE_IP}" "deploy ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}"
